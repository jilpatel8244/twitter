<div id="modelConfirm" class="fixed hidden z-50 inset-0 bg-gray-900 bg-opacity-60 overflow-y-auto h-full w-full px-4 ">
    <div class="relative top-40 mx-auto shadow-xl rounded-md bg-white max-w-md">

        <div class="flex justify-between items-center p-4 border-b-2">
            <div>
                <p>Send via Direct Message</p>
            </div>
            <button onclick="closeModal('modelConfirm')" type="button"
                class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 inline-flex items-center">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd"
                        d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                        clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>

        <div id="selectedFollowers" class="flex flex-wrap px-2 py-1">

        </div>

        <div class="p-2 h-[50vh] overflow-x-hidden" id="listOfFollwers">
        </div>

        <div class="p-6 pt-0 text-center">
            <button onclick="sendTweetHandler()" id="shareTweetUsingDirectMessageButton" disabled
                class="text-white bg-blue-600 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-base inline-flex items-center px-3 py-2.5 text-center">
                Send
            </button>
        </div>

    </div>
</div>

<script src="/js/getFollowersList.script.js"></script>
<script type="text/javascript">
    let tweetId;
    window.openModal = async function (modalId, tweet_id) {
        tweetId = tweet_id
        document.getElementById(modalId).style.display = 'block'
        document.getElementsByTagName('body')[0].classList.add('overflow-y-hidden')


        //  make fetch request and get all the followers list

        let url = window.location.origin + '/getAllFollowersList';

        let data = await fetch(url, {
            method: "GET"
        });

        let response = await data.json();

        if (response.success) {
            let listOfFollwers = document.getElementById('listOfFollwers');

            let users = getFollowersList(response.message);

            listOfFollwers.innerHTML = users;

        }
    }

    window.closeModal = function (modalId) {
        document.getElementById(modalId).style.display = 'none';
        document.getElementsByTagName('body')[0].classList.remove('overflow-y-hidden');

        document.getElementById('selectedFollowers').innerHTML = '';
        selectedUserArr = [];
    }

    // Close all modals when press ESC
    document.onkeydown = function (event) {
        event = event || window.event;
        if (event.keyCode === 27) {
            document.getElementsByTagName('body')[0].classList.remove('overflow-y-hidden')
            let modals = document.getElementsByClassName('modal');
            Array.prototype.slice.call(modals).forEach(i => {
                i.style.display = 'none'
            })
        }
    };

    async function sendTweetHandler() {
        console.log(selectedUserArr);
        let url = window.location.origin + '/shareTweet';

        let data = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                'link': window.location.origin + '/get_comments/' + tweetId,
                'users': selectedUserArr
            }),
        });

        let response = await data.json();
        console.log("this is my response ", response);

        if (response.success) {
            // send notification and message
            selectedUserArr.forEach((element, index) => {
                socket.emit('getUnreadMessages', selectedUserArr[index]);
                socket.emit('send-private-message',
                    {
                        senderId: response.message.senderId,
                        reciverId: selectedUserArr[index],
                        content: response.message.content,
                        url: response.message.url,
                        content_type: response.message.content_type,
                        created_at: response.message.created_at
                    });
            })

            // remove all selected header
            document.getElementById('selectedFollowers').innerHTML = '';

            // remove empty selected array
            selectedUserArr = [];
            document.getElementById('shareTweetUsingDirectMessageButton').disabled = true;

            // close popup
            closeModal('modelConfirm');

            // display none to the share toggle
            let shareOptionsDiv = document.getElementById(`shareOptions` + tweetId);
            shareOptionsDiv.style.display = "none";

            // display toast
            Swal.fire({
                toast: true,
                icon: 'success',
                title: 'Direct Message sent',
                background: 'rgb(14 165 233)',
                animation: false,
                position: 'bottom',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
            })
        }
    }
</script>