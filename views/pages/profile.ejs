<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="/css/output.css" />
  <title>Profile</title>
  <style>
    .overflow-y-auto::-webkit-scrollbar,
    .overflow-y-scroll::-webkit-scrollbar,
    .overflow-x-auto::-webkit-scrollbar,
    .overflow-x::-webkit-scrollbar,
    .overflow-x-scroll::-webkit-scrollbar,
    .overflow-y::-webkit-scrollbar,
    body::-webkit-scrollbar {
      display: none;
    }

    /* Hide scrollbar for IE, Edge and Firefox */
    .overflow-y-auto,
    .overflow-y-scroll,
    .overflow-x-auto,
    .overflow-x,
    .overflow-x-scroll,
    .overflow-y,
    body {
      -ms-overflow-style: none;
      /* IE and Edge */
      scrollbar-width: none;
      /* Firefox */
    }

    .bg-dim-700 {
      --bg-opacity: 1;
      background-color: #192734;
    }

    html,
    body {
      margin: 0;
      padding: 0;
      max-width: 100%;
      background-color: white;
    }

    svg.paint-icon {
      fill: currentcolor;
    }
  </style>
</head>

<body onload="fetchPosts()">
  <div class="p-relative h-screen" style="background-color: white">
    <div class="flex justify-center">
      <header class="py-4 h-auto">
        <!-- Side Navbar (left side) -->
        <%- include('../partials/sidebar.ejs') %>
      </header>
      <main role="main">
        <div class="flex" style="width: 990px">
          <%if(userProfileData){%>
            <section class="w-3/5 border border-gray-200 max-w-screen-sm min-h-dvh md:max-w-screen-sm">
              <div class="justify-center">

                <!--Content (Center)-->
                <!-- Nav back-->
                <div>
                  <div class="flex justify-start">
                    <div class="px-4 py-2 mx-2">
                      <a href=""
                        class=" text-2xl font-medium rounded-full text-blue-400 hover:bg-whitesmoke-800 hover:text-blue-300 float-right">
                        <svg class="m-2 h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                          <g>
                            <path
                              d="M20 11H7.414l4.293-4.293c.39-.39.39-1.023 0-1.414s-1.023-.39-1.414 0l-6 6c-.39.39-.39 1.023 0 1.414l6 6c.195.195.45.293.707.293s.512-.098.707-.293c.39-.39.39-1.023 0-1.414L7.414 13H20c.553 0 1-.447 1-1s-.447-1-1-1z">
                            </path>
                          </g>
                        </svg>
                      </a>
                    </div>
                    <div class="mx-2">
                      <h2 class="mb-0 text-xl font-bold text-black">
                        <%=userProfileData[0].name%>
                      </h2>
                      <p class="mb-0 w-48 text-xs text-gray-400">
                        <%if(postData){%>
                          <%=twitCountData[0].t%> Tweets
                            <%}%>
                      </p>
                    </div>
                  </div>


                </div>

                <!-- User card-->
                <div class="w-full bg-fit bg-no-repeat bg-center" style="height: 200px; background-image:
                  linear-gradient(to bottom, rgba(245, 246, 252, 0.52), rgba(206, 202, 202, 0.73)),
                  url('./uploads/<%=userProfileData[0].cover_img_url%>');">

                </div>
                <div class="w-full p-4">
                  <div class="flex w-full">
                    <!-- Avatar -->
                    <div class="flex flex-1">
                      <div style="margin-top: -6rem;">
                        <div style="height:9rem; width:9rem;" class="md rounded-full avatar">
                          <img style="height:9rem; width:9rem;"
                            class="md rounded-full -z-1 border-4 border-gray-900"
                            src="./uploads/<%=userProfileData[0].profile_img_url%>" alt="">
                          <div class="absolute"></div>
                        </div>
                      </div>
                    </div>


                    
                <% if (id !== userProfileData[0].id) { %>
                 
                  
                    <!-- Render Follow button if not following this profile -->
                    <div
                    class="flex justify-center -z-1 max-h-max whitespace-nowrap focus:outline-none  focus:ring  max-w-max border bg-transparent border-blue-500 text-blue-500 hover:border-blue-800  items-center hover:shadow-lg font-bold py-2 px-4 rounded-full mr-0 ml-auto" id="followButton" onclick="toggleFollow('<%= userProfileData[0].id %>', 'follow')">Follow</div>
                   
                  
                  <% } %>
                  <% if (id === userProfileData[0].id) { %>
                    <div
                        class="flex justify-center -z-1 max-h-max whitespace-nowrap focus:outline-none  focus:ring  max-w-max border bg-transparent border-blue-500 text-blue-500 hover:border-blue-800  items-center hover:shadow-lg font-bold py-2 px-4 rounded-full mr-0 ml-auto">
                        <a href="editprofile?id=<%=userProfileData[0].id%>">Edit Profile</a>
                      </div>
                  <% } %>

                  </div>

                  <!-- Profile info -->
                  <div class="space-y-1 justify-center w-full mt-3 ml-3">
                    <!-- User basic-->
                    <div>
                      <h2 class="text-xl leading-6 font-bold text-black">
                        <%=userProfileData[0].name%>
                      </h2>
                      <p class="text-sm leading-5 font-medium text-gray-600">@<%=userProfileData[0].username%>
                      </p>
                    </div>
                    <!-- Description and others -->
                    <div class="mt-3">
                      <p class="text-black leading-tight mb-2">
                        <%=userProfileData[0].bio%>
                      </p>
                      <div class="text-gray-600 flex">
                        <span class="flex mr-2">
                          <p class="leading-5 ">
                            <%=userProfileData[0].email%>
                          </p></span>
                        <span class="flex mr-2"><svg viewBox="0 0 24 24" class="h-5 w-5 paint-icon">
                            <g>
                              <path
                                d="M19.708 2H4.292C3.028 2 2 3.028 2 4.292v15.416C2 20.972 3.028 22 4.292 22h15.416C20.972 22 22 20.972 22 19.708V4.292C22 3.028 20.972 2 19.708 2zm.792 17.708c0 .437-.355.792-.792.792H4.292c-.437 0-.792-.355-.792-.792V6.418c0-.437.354-.79.79-.792h15.42c.436 0 .79.355.79.79V19.71z">
                              </path>
                              <circle cx="7.032" cy="8.75" r="1.285"></circle>
                              <circle cx="7.032" cy="13.156" r="1.285"></circle>
                              <circle cx="16.968" cy="8.75" r="1.285"></circle>
                              <circle cx="16.968" cy="13.156" r="1.285"></circle>
                              <circle cx="12" cy="8.75" r="1.285"></circle>
                              <circle cx="12" cy="13.156" r="1.285"></circle>
                              <circle cx="7.032" cy="17.486" r="1.285"></circle>
                              <circle cx="12" cy="17.486" r="1.285"></circle>
                            </g>
                          </svg> <span class="leading-5 ml-1"> joined 
                            <%const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]; 
                            let month = months[(userProfileData[0].created_at).getMonth()]
                            let year = (userProfileData[0].created_at).getFullYear()%>
                            <%=month%> <%=year%>
                          </span></span>
                      </div>
                    </div>
                    <%if(!follower_detail_data[0] && !following_detail_data[0]){%>
                      <div class="pt-3 flex justify-start items-start w-full divide-x divide-gray-800 divide-solid">
                        <div class="text-center pr-3"><span class="font-bold text-black">

                          </span><span class="text-gray-600"> Following</span></div>
                        <div class="text-center px-3"><span class="font-bold text-black">

                          </span><span class="text-gray-600"> Followers</span></div>
                      </div>
                      <%}%>
                        <%if(follower_detail_data[0]){%>
                          <div class="pt-3 flex justify-start items-start w-full divide-x divide-gray-800 divide-solid">
                            <div class="text-center pr-3"><span class="font-bold text-black">
                                <%=following_detail_data[0].following %>
                              </span><span class="text-gray-600"> Following</span></div>
                            <div class="text-center px-3"><span class="font-bold text-black">
                                <%=follower_detail_data[0].follower %>
                              </span><span class="text-gray-600"> Followers</span></div>
                          </div>
                          <%}%>
                  </div>
                </div>

              </div>

              <!-- component -->
              <div class="bg-whitesmoke">
                <nav class="flex flex-col sm:flex-row">

                  <input type="button" value="Posts" onclick="fetchPosts()" id="posts"
                    class="w-1/3 text-gray-600 py-4 px-6 block hover:text-blue-500 focus:outline-none">

                  <input type="button" value="Replies" onclick="fetchReplies()" id="replies"
                    class="w-1/3 text-gray-600 py-4 px-6 block hover:text-blue-500 focus:outline-none">

                  <input type="button" value="Likes" onclick="fetchLikes()" id="like"
                    class="w-1/3 text-gray-600 py-4 px-6 block hover:text-blue-500 focus:outline-none">

                </nav>

              </div>

              <!-- tweet-->
              <article class="hover:bg-whitesmoke-800 transition duration-350 ease-in-out w-full" id="tab" hidden>

              </article>

            </section>
            <%- include('../partials/aside.ejs')%>
              <%}%>
        </div>
      </main>
    </div>
  </div>
  </div>

  <script>
    const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]; 
    let tab = document.getElementById("tab");
    let replies = document.getElementById("replies");
    let posts = document.getElementById("posts");
    let like = document.getElementById("like");

    async function fetchPosts() {
      tab.innerHTML = " ";
      let postDetails = await fetch('/profile/post', {
        method: "GET"
      }).then((value) => {
        return value.json();
      }).then((value2) => {
        console.log(value2.postData);
        for (let i = 0; i < value2.postData.length; i++) {
          console.log(i);
          tab.innerHTML += `<%- include('../partials/post.ejs')%>`;
        }
        let postName = document.getElementsByClassName("name");
        let postUsername = document.getElementsByClassName("username");
        let profileImage = document.getElementsByClassName("profileImage");
        let postCreatedAt = document.getElementsByClassName("created_at");
        let media = document.getElementsByClassName("media");
        let postContent = document.getElementsByClassName("content");
        let postIdElement = document.getElementsByClassName("commentElement");
        console.log(postName, postUsername, postCreatedAt, postContent,postIdElement);
        console.log("Data length",value2.postData.length);

        for (let i = 0; i < value2.postData.length; i++) {
          postName[i].innerText = value2.postData[i].name;
          postUsername[i].innerText = value2.postData[i].username;
          profileImage[i].setAttribute("src", "./uploads/" + value2.postData[i].profileImage);
          media[i].setAttribute("src", "./uploads/"+value2.postData[i].media);
          console.log(value2.postData[i].created_at);
          let date= new Date(value2.postData[i].created_at);
          let month = months[date.getMonth()];
          postCreatedAt[i].innerText = " "+date.getDate() + " "+month+" ";
          postContent[i].innerText = value2.postData[i].content;
          postIdElement[i].setAttribute("href", "get_comments/"+value2.postData[i].id);
                   
        }
      });

      posts.setAttribute("style", "border-bottom: 2px solid skyblue");
      like.removeAttribute("style");
      replies.removeAttribute("style");

      tab.removeAttribute("hidden");
      console.log("Hello From the Posts section");
    }

    async function fetchReplies() {

      replies.setAttribute("style", "border-bottom: 2px solid skyblue");
      posts.removeAttribute("style");
      like.removeAttribute("style");
      document.getElementById("tab").innerHTML = "";

      await fetch('/profile/reply', {
        method: "GET"
      }).then((value) => {
        return value.json();
      }).then((value1) => {
        console.log(value1.repliesData);
        console.log(value1.repliesData[0].length);

        for (let i = 0; i < value1.repliesData[0].length; i++) {
          tab.innerHTML += `<%- include('../partials/reply.ejs')%>`;
        }

        let name = document.getElementsByClassName("name");
        let username = document.getElementsByClassName("username");
        let profileImage = document.getElementsByClassName("profileImage");
        let media = document.getElementsByClassName("userMedia");
        let createdAt = document.getElementsByClassName("created_at");
        let content = document.getElementsByClassName("content");
        let postIdElement = document.getElementsByClassName("commentElement");

        let replyerName = document.getElementsByClassName("replyerName");
        let replyerUsername = document.getElementsByClassName("replyerUsername");
        let replyerProfileImage = document.getElementsByClassName("replyerProfileImage");
        let replyerMedia = document.getElementsByClassName("replyerMedia");
        let replyerTweetDate = document.getElementsByClassName("replyerTweetDate");
        let replyerRetweetMessage = document.getElementsByClassName("replyerRetweetMessage");
        let replyerPostIdElement = document.getElementsByClassName("replyercommentElement");

        console.log(name, username, createdAt, content, replyerName, replyerUsername, replyerTweetDate, replyerRetweetMessage);

        for (let i = 0; i < value1.repliesData[0].length; i++) {

          name[i].innerText = value1.repliesData[0][i].name;
          username[i].innerText = value1.repliesData[0][i].username;
          profileImage[i].setAttribute("src", "./uploads/" + value1.repliesData[0][i].profileImage);
          media[i].setAttribute("src", "./uploads/"+ value1.repliesData[0][i].media);
          let date = new Date(value1.repliesData[0][1].created_at);
          let month = months[date.getMonth()];
          createdAt[i].innerText = " "+date.getDate()+" "+month+" ";
          content[i].innerText = value1.repliesData[0][i].content;
          postIdElement[i].setAttribute("href", "get_comments/"+value1.repliesData[0][i].id);

          replyerName[i].innerText = value1.repliesData[1][i].replyerName;
          replyerUsername[i].innerText = value1.repliesData[1][i].replyerUsername;
          replyerProfileImage[i].setAttribute("src", "./uploads/" + value1.repliesData[1][i].replyerProfileImage);
          // replyerMedia[i].setAttribute("src", "./uploads/"+value1.repliesData[1][i].replyerMedia);
          let replyDate = new Date(value1.repliesData[1][i].retweetDate);
          let replyMonth = months[replyDate.getMonth()];
          replyerTweetDate[i].innerText = " "+replyDate.getDate()+" "+month+" ";
          replyerRetweetMessage[i].innerText = value1.repliesData[1][i].replyerMessage;
          replyerPostIdElement[i].setAttribute("href", "get_comments/"+value1.repliesData[1][i].tweetId);
        }
        tab.removeAttribute("hidden");
        console.log("Hello From the Replies section");
      });
    }

    function comment() {
      let commentSection = document.getElementById("comment");
      let place = document.getElementById("place");
      place.removeAttribute("hidden");
      place.innerHTML = `<%- include('../partials/comment.ejs', {commentData})%>`;
      console.log("You clicked!");
    }

    async function fetchLikes() {
      let tab = document.getElementById("tab");
      tab.innerHTML = "";
      like.setAttribute("style", "border-bottom: 2px solid skyblue");
      posts.removeAttribute("style");
      replies.removeAttribute("style");

      await fetch('/profile/like')
        .then((response) => {
          return response.json();
        }).then((data) => {
          console.log(data);
          for (let i = 0; i < data.length; i++) {
            tab.innerHTML += `<%- include('../partials/like.ejs')%>`;
          }

          let postName = document.getElementsByClassName("name");
          let postUsername = document.getElementsByClassName("username");
          let profileImage = document.getElementsByClassName("profileImage");
          let postCreatedAt = document.getElementsByClassName("created_at");
          let postContent = document.getElementsByClassName("content");
          let likeSign = document.getElementsByClassName("likeSign");
          let media = document.getElementsByClassName("media");
          let postIdElement = document.getElementsByClassName("commentElement");
          console.log(postName, postUsername, postCreatedAt, postContent);

          for (let i = 0; i < data.length; i++) {
            postName[i].innerText = data[i].name;
            postUsername[i].innerText = data[i].username;
            profileImage[i].setAttribute("src", "./uploads/" + data[i].profileImage);
            let date=new Date(data[i].created_at);
            let month=months[date.getMonth()];
            postCreatedAt[i].innerText = " "+date.getDate()+" "+month+" ";
            postContent[i].innerText = data[i].content;
            likeSign[i].classList.add('fill-red-600', 'text-red-600');
            media[i].setAttribute("src", "./uploads/"+data[i].media);
            postIdElement[i].setAttribute("href", "get_comments/"+data[i].tweet_id);
          }
        });

      tab.removeAttribute("hidden");
      console.log("Hello From the Likes section");
    }

    async function toggleFollow(id, action) {
    try {
      // Create request body
      const body = {
        id: id,
        action: action
      };

      // Send POST request to server
      const response = await fetch('/follow', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
      });

      // Parse response JSON
      const responseData = await response.json();

      // Check if request was successful
      if (response.ok) {
        // Update button text and action based on response
        if (action === 'follow') {
          document.getElementById('followButton').innerText = 'Following';
          document.getElementById('followButton').setAttribute('onclick', `toggleFollow('${id}', 'unfollow')`);
          document.getElementById('followButton').id = 'unfollowButton';
        } else {
          document.getElementById('unfollowButton').innerText = 'Follow';
          document.getElementById('unfollowButton').setAttribute('onclick', `toggleFollow('${id}', 'follow')`);
          document.getElementById('unfollowButton').id = 'followButton';
        }
        console.log('Follow/unfollow request successful');
      } else {
        console.error('Follow/unfollow request failed:', responseData.message);
      }
    } catch (error) {
      console.error( error.message);
    }
  }
  </script>

  <script src="/js/bookmark.script.js"></script>
  <script src="/js/like.script.js"></script>
</body>

</html>