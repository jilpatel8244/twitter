<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>X - messages</title>
    <link href="/css/output.css" rel="stylesheet" />
    <style>
        input:focus{
            outline: none;
        }

        .sender-chat, .reciver-chat{
            padding: 20px 20px;
        }

        .sender-chat span, .reciver-chat span{
            padding: 15px 20px;
            border-radius: 30px;
        }
        
        .sender-chat span{
            background-color: rgb(14 165 233);
            color: white;
        }

        .reciver-chat span{
            background-color: rgb(245, 248, 250);
            color: black;
        }

        .active-user{
            background-color: rgb(245, 248, 250);
        }
    </style>
</head>

<body>
    <div class="p-relative h-screen" style="background-color: white">
        <div class="flex justify-center">
            <header class=" h-12 py-4 h-auto">
                <!-- Side Navbar (left side) -->
                <%- include('../partials/sidebar.ejs') %>
            </header>
            <main role="main">
                <div class="flex h-lvh" style="width: 990px;">
                    <%- include('../partials/messagesComponent.ejs') %>

                    <div class="w-3/5 border-r border-gray-200 overflow-auto relative" id="user-display-and-chatting">
                        <div id="prev-chat-section">
                            <div>
                                <div class="overflow-y-auto fixed  h-screen">
                                    <h2>select to start the chat</h2>
                                </div>
                            </div>
                        </div>

                        <div id="chat-section" class="relative" style="display: none;">

                            <!-- sticky follower name -->
                            <div class="flex-1 sticky top-0 text-black bg-white opacity-90">
                                <h2 class="px-4 py-4 text-xl font-semibold " id="selectedUserName">name</h2>
                            </div>

                            <!-- reciver-user (follower) info  -->
                            <div id="reciver-user-info" class="border-b border-gray-200">
                                <div class="flex flex-col items-center pb-11">
                                    <div>
                                        <img class="inline-block h-14 w-14 rounded-full"
                                            src="https://pbs.twimg.com/profile_images/1121328878142853120/e-rpjoJi_bigger.png" alt="" />
                                    </div>
                                    <div>
                                        <span class="text-black font-semibold" id="selectedUserName1">name</span>
                                    </div>
                                    <div>
                                        <span class="text-black" id="selectedUserUsername">user name</span>
                                    </div>
                                </div>
                            </div>

                            <!-- chat container -->
                            <div class="h-5/6 py-5 " id="chat-container">
                            </div>

                            <!-- sticky user input form -->
                            <div class="sticky bottom-0 py-2 bg-white">
                                <div class="mx-4 border border-t-gray-200 rounded-xl" style="background-color: #eff3f4;">
                                    <form id="messageForm" class="relative">
                                        <div class="flex items-center relative">
                                            <div>
                                                <label for="img-message">
                                                    <a class="-1 group flex items-center text-blue-400 px-2 py-2 text-base leading-6 font-medium rounded-full hover:bg-opacity-20 hover:bg-[#8fa2c4] hover:text-blue-600">
                                                        <svg class="text-center h-7 w-6" fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                                                            </path>
                                                        </svg>
                                                    </a>
                                                </label>
                                                <input type="file" onchange="previewMedia(event)" name="img-message" id="img-message" accept="image/png, image/jpeg, image/jpg" class="hidden">
                                            </div>
                                            <input type="text" class="placeholder:text-gray-400"  name="message" onkeyup="checkMessageBox()" onkeydown="checkMessageBox()" id="message" placeholder="Start a new message" style="background-color: #eff3f4; width: 100%;">
                                            <input type="submit" value="Send" class="opacity-50 p-2" id="messageSendBtn">
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <style>
        .overflow-y-auto::-webkit-scrollbar,
        .overflow-y-scroll::-webkit-scrollbar,
        .overflow-x-auto::-webkit-scrollbar,
        .overflow-x::-webkit-scrollbar,
        .overflow-x-scroll::-webkit-scrollbar,
        .overflow-y::-webkit-scrollbar,
        body::-webkit-scrollbar {
            display: none;
        }

        /* Hide scrollbar for IE, Edge and Firefox */
        .overflow-y-auto,
        .overflow-y-scroll,
        .overflow-x-auto,
        .overflow-x,
        .overflow-x-scroll,
        .overflow-y,
        body {
            -ms-overflow-style: none;
            /* IE and Edge */
            scrollbar-width: none;
            /* Firefox */
        }

        .bg-dim-700 {
            --bg-opacity: 1;
            background-color: white;
        }

        html,
        body {
            margin: 0;
            background-color: white;
        }

        svg.paint-icon {
            fill: currentcolor;
        }
    </style>

    <script src="/socket.io/socket.io.js"></script>

    <script>
        let socket = io();

        let senderId = '<%= user %>';
        let reciverId;
        let reciverName;

        socket.on('connect', () => {
            console.log('connected to server ' + socket.id);

            socket.emit('user-connected', senderId);
        })

        function openMessageBox(followerId, reciverName, reciverUsername, reciverImgUrl) {
            reciverId = followerId;

            let allUsers = Array.from(document.querySelectorAll('ul li'));
            allUsers.forEach((element) => {
                element.classList.remove('active-user');
            });

            document.getElementById(followerId).parentElement.classList.add('active-user');


            document.getElementById('selectedUserName').innerHTML = reciverName;
            document.getElementById('selectedUserUsername').innerHTML = `@`+reciverUsername;
            document.getElementById('selectedUserName1').innerHTML = reciverName;

            document.getElementById('prev-chat-section').style.display = 'none';
            document.getElementById('chat-section').style.display = 'block';

            socket.emit('existingChats', {senderId: senderId, reciverId: reciverId});
        }

        document.getElementById('messageForm').addEventListener('submit', async (event) => {
            event.preventDefault();

            let message = document.getElementById('message').value;
        

            // if (message && message.length != 0 && message.length < 250) {
                let url = window.location.origin + '/messages/storeMessage';

                let data = await fetch(url, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        senderId: senderId,
                        reciverId: reciverId,
                        message: message
                    }),
                });

                let response = await data.json();

                if (response.success) {

                    document.getElementById('message').value = '';

                    let newDiv = document.createElement('div');
                    newDiv.classList.add('text-right', 'sender-chat');
                    newDiv.innerHTML = `<span>${response.message.message}</span>`;

                    document.getElementById('chat-container').appendChild(newDiv);
                    scrollToBottom('user-display-and-chatting');

                    socket.emit('send-private-message', response.message);
                }
            // }
        })

        // receive private messages
        socket.on('receive-private-message', (data) => {
            let newDiv = document.createElement('div');
            newDiv.classList.add('reciver-chat');
            newDiv.innerHTML = `<span>${data.message}</span>`;
    
            document.getElementById('chat-container').appendChild(newDiv);  
            scrollToBottom('user-display-and-chatting');
        })

        // load old chats
        socket.on('loadChats', (data) => {
            document.getElementById('chat-container').innerHTML = '';

            console.log(data.oldchats);

            data.oldchats.forEach((element, index) => {
                if (element.sender_id == senderId) {
                    let newDiv = document.createElement('div');
                    newDiv.classList.add('text-right', 'sender-chat');
                    newDiv.innerHTML = `<span>${element.content}</span>`;

                    document.getElementById('chat-container').appendChild(newDiv);
                } else {
                    let newDiv = document.createElement('div');
                    newDiv.classList.add('reciver-chat');
                    newDiv.innerHTML = `<span>${element.content}</span>`;
        
                    document.getElementById('chat-container').appendChild(newDiv);  
                }
                scrollToBottom('user-display-and-chatting');
            });
        })


        const scrollToBottom = (id) => {
            const element = document.getElementById(id);
            element.scrollTop = element.scrollHeight;
        }

        const checkMessageBox = () => {
            let message = document.getElementById('message').value;
            // let file = document.getElementById('img-message');

            if (message.length === 0 || message.length > 250) {
                document.getElementById("messageSendBtn").disabled = true;
                document.getElementById("messageSendBtn").style.opacity = 0.5;
            } else {
                document.getElementById("messageSendBtn").disabled = false;
                document.getElementById("messageSendBtn").style.opacity = 1;
            }
        }

        const previewMedia = (event) => {
            let form = document.getElementById('messageForm');

            let newDiv = document.createElement('div');
            newDiv.innerHTML = `<img src="" alt="" id="preview_img" class="h-24 w-24">`;

            form.insertBefore(newDiv, form.firstChild);

            let output = document.getElementById('preview_img');

            output.src = URL.createObjectURL(event.target.files[0]);
            output.onload = function () {
                URL.revokeObjectURL(output.src) // free memory
            }

            // document.getElementById("messageSendBtn").disabled = false;
            // document.getElementById("messageSendBtn").style.opacity = 1;
        }
    </script>
</body>

</html>