<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>X - messages</title>
    <link href="/css/output.css" rel="stylesheet" />
</head>

<body>
    <div class="p-relative h-screen" style="background-color: white">
        <div class="flex justify-center">
            <header class=" h-12 py-4 h-auto">
                <!-- Side Navbar (left side) -->
                <%- include('../partials/sidebar.ejs') %>
            </header>
            <main role="main">
                <div class="flex" style="width: 990px;">
                    <%- include('../partials/messagesComponent.ejs') %>

                        <div id="prev-chat-section">
                            <div style="max-width:350px;">
                                <div class="overflow-y-auto fixed  h-screen">
                                    <h2>select to start the chat</h2>
                                </div>
                            </div>
                        </div>

                        <div id="chat-section" class="h-screen" style="display: none;">
                            <div class="h-5/6 overflow-scroll" id="chat-container">
                                <!-- <div class="text-right sender-chat">
                                    <p>jil</p>
                                </div>
                                <div class="reciver-chat">
                                    <p>abhishek</p>
                                </div> -->
                            </div>
                            <div>
                                <form id="messageForm">
                                    <input type="text" name="message" id="message" placeholder="write message here">
                                    <input type="submit" value="Send">
                                </form>
                            </div>
                        </div>
                </div>
            </main>
        </div>
    </div>

    <style>
        .overflow-y-auto::-webkit-scrollbar,
        .overflow-y-scroll::-webkit-scrollbar,
        .overflow-x-auto::-webkit-scrollbar,
        .overflow-x::-webkit-scrollbar,
        .overflow-x-scroll::-webkit-scrollbar,
        .overflow-y::-webkit-scrollbar,
        body::-webkit-scrollbar {
            display: none;
        }

        /* Hide scrollbar for IE, Edge and Firefox */
        .overflow-y-auto,
        .overflow-y-scroll,
        .overflow-x-auto,
        .overflow-x,
        .overflow-x-scroll,
        .overflow-y,
        body {
            -ms-overflow-style: none;
            /* IE and Edge */
            scrollbar-width: none;
            /* Firefox */
        }

        .bg-dim-700 {
            --bg-opacity: 1;
            background-color: white;
        }

        html,
        body {
            margin: 0;
            background-color: white;
        }

        svg.paint-icon {
            fill: currentcolor;
        }
    </style>

    <script src="/socket.io/socket.io.js"></script>

    <script>
        var socket = io();

        let senderId = '<%= user %>';
        let reciverId;

        function openMessageBox(followerId) {
            reciverId = followerId;

            document.getElementById('prev-chat-section').style.display = 'none';
            document.getElementById('chat-section').style.display = 'block';

            socket.emit('existingChats', {senderId: senderId, reciverId: reciverId});
        }

        document.getElementById('messageForm').addEventListener('submit', async (event) => {
            event.preventDefault();

            let message = document.getElementById('message').value;

            let url = window.location.origin + '/messages/storeMessage';

            let data = await fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    senderId: senderId,
                    reciverId: reciverId,
                    message: message
                }),
            });

            let response = await data.json();

            if (response.success) {

                document.getElementById('message').value = '';

                let newDiv = document.createElement('div');
                newDiv.classList.add('text-right', 'sender-chat');
                newDiv.innerHTML = `<p>${response.message.message}</p>`;

                document.getElementById('chat-container').appendChild(newDiv);

                socket.emit('newChat', response.message);
            }

        })

        socket.on('loadNewChat', (data) => {
            console.log(data);
            if (senderId == data.reciverId && reciverId == data.senderId) {
                let newDiv = document.createElement('div');
                    newDiv.classList.add('reciver-chat');
                    newDiv.innerHTML = `<p>${data.message}</p>`;
    
                    document.getElementById('chat-container').appendChild(newDiv);  
            }
        })

    </script>
</body>

</html>